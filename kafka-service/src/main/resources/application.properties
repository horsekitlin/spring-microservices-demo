spring.application.name=KAFKA-SERVICE
spring.config.import=optional:configserver:http://localhost:8400

# kafka settings
spring.kafka.demo-topic.name=kafka-demo

spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# kafka
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=myGroup
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

# 自動消費功能設定: 使用自動消費 在收到消息的時候會自動向 Kafka 確認並且消費訊息
spring.kafka.consumer.enable-auto-commit=false

# 消費模式:
# manual - 當每一批 pull() 處理後 手動呼叫 Acknowledgment.acknowiedge() 後提交
# manual_immediate - 手動呼叫 Acknowledgment.acknowiedge() 後提交
# record - 當每一條訊息處理後提交
# batch - 每一批 pull() 處理後提交
# time - 每一批 poll() 的訊息被處理之後 距離上次提交的時間大於 time 的時間後提交
# count - 每一批 poll() 的訊息數量大於 count 後提交
# count_time - count 或是 time 有一個滿足時提交
spring.kafka.listener.ack-mode=manual

